type User {
  id: ID! @id
  name: String!
  email: String! @unique
  password: String!
  accountType: AccountType
  orders: [Order!]! @relation(name: "OrdersByUser" onDelete: CASCADE)
  createdOrders: [Order!]! @relation(name: "OrdersCreatedByUser" onDelete: SET_NULL)
  updatedAt: DateTime! @updatedAt 
  createdAt: DateTime! @createdAt 
}


type Order{
  id: ID! @id
  orderDate: DateTime!
  purchaseDate: DateTime
  isPaid: Boolean! @default(value: false)
  shippingFee: Float
  totalPrice: Float
  products: [OrderedProduct!] @relation(onDelete: CASCADE)
  buyer: User! @relation(name: "OrdersByUser" onDelete: SET_NULL)
  createdBy: User @relation(name: "OrdersCreatedByUser" onDelete: SET_NULL)
  updatedAt: DateTime! @updatedAt 
  createdAt: DateTime! @createdAt 
}

type OrderedProduct{
  id: ID! @id
  quantity: Int!
  product: Product @relation(link:INLINE name: "ProductToOrderedProduct" onDelete: SET_NULL)
  order: Order
  
}

type Product{
  id: ID! @id
  orderedProduct: [OrderedProduct!] @relation(name: "ProductToOrderedProduct" onDelete: CASCADE)
  category: Category @relation(name: "CategoryToProduct" onDelete: SET_NULL)
  name: String!
  code: String! @unique
  available: Int!
  expDate: DateTime
  price: Price @relation(name: "ProductPrice" onDelete: CASCADE)
  image: String
  updatedAt: DateTime! @updatedAt 
  createdAt: DateTime! @createdAt 
}

type Category{
  id: ID! @id
  name: String!
  description: String
  products: [Product!] @relation(name: "CategoryToProduct" onDelete: CASCADE)
  updatedAt: DateTime! @updatedAt 
  createdAt: DateTime! @createdAt 
}

type Price{
  id: ID! @id
  retail: Float!
  reseller: Float!
  cityDistributor: Float!
  provincialDistributor: Float!
  product: Product @relation(name: "ProductPrice" onDelete: CASCADE link: INLINE)
  updatedAt: DateTime! @updatedAt 
  createdAt: DateTime! @createdAt 
}



enum AccountType{
  RETAILER
  RESELLER
  CITY_DISTRIBUTOR
  PROVINCIAL_DISTRIBUTOR
}
