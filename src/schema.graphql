# import UserOrderByInput, AccountType, OrderOrderByInput, ProductOrderByInput, CategoryOrderByInput from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    user(id: ID!): User!
    me: User!

    orders(isPaid: Boolean, first: Int, skip: Int, after: String, orderBy: OrderOrderByInput): [Order!]!
    order(id: ID!): Order!
    products(query: String, first: Int, skip: Int, after: String, orderBy: ProductOrderByInput): [Product!]!
    product(id: ID!): Product!
    categories(query: String, first: Int, skip: Int, after: String, orderBy: CategoryOrderByInput): [Category!]!
    category(id: ID!): Category!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(id: ID, data: UpdateUserInput!): User!

    createOrder(data: CreateOrderInput!): Order!
    updateOrder(id: ID!, data: UpdateOrderInput!): Order!
    deleteOrder(id: ID!, orderedProducts: [OrderedProductInput!]): Order
    processOrder(id: ID!, purchaseDate: DateTime!): Order!
    
    createProduct(data: SaveProductInput): Product
    deleteProduct(id: ID!): Product!
    updateProduct(id: ID!, data: SaveProductInput!): Product!

    createCategory(data: SaveCategoryInput!): Category!
    deleteCategory(id: ID!): Category!
    updateCategory(id: ID!, data: SaveCategoryInput!): Category!
}

# type Subscription {

# }

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    accountType: AccountType!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    accountType: AccountType
    name: String
    email: String
    password: String
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    accountType: AccountType!
    orders: [Order!]!
    createdOrders: [Order!]!
    updatedAt: String!
    createdAt: String!
}

input CreateOrderInput{
    orderDate: DateTime!
    purchaseDate: DateTime
    isPaid: Boolean
    shippingFee: Float
    buyer: ID!
    buyerAccount: String!
    products: [OrderedProductInput!]!
}
input UpdateOrderInput{
    orderDate: DateTime
    shippingFee: Float
    products: [OrderedProductInput!]
    oldTotalPrice: Float
    oldShippingFee: Float
    oldProductData: [OrderedProductInput!]
    buyer: ID
    buyerAccount: String
}

input OrderedProductInput{
  quantity: Int!
  orderedProduct: ID
  product: ID!
  price: PriceInput
  available: Int
}


input SaveProductInput {
  name: String!
  code: String!
  available: Int!
  expDate: DateTime
  price: PriceInput!
  category: ID!
}

input SaveCategoryInput {
  name: String!
  description: String
}
input PriceInput{
  retail: Float!
  reseller: Float!
  cityDistributor: Float!
  provincialDistributor: Float!
}

type Order{
  id: ID! 
  orderDate: DateTime!
  purchaseDate: DateTime
  isPaid: Boolean!
  totalPrice: Float!
  shippingFee: Float
  buyer: User!
  createdBy: User!
  products: [OrderedProduct!]!
  updatedAt: String!
  createdAt: String!
}

type Category{
  id: ID!
  name: String!
  description: String
  products: [Product!]
}

type OrderedProduct{
  id: ID!
  quantity: Int!
  product: Product!
  order: Order
}

type Product{
  id: ID!
  category: Category
  orderedProduct: [OrderedProduct!]
  name: String!
  code: String!
  available: Int!
  expDate: DateTime!
  orders: [Order!]!
  price: Price!
  updatedAt: String! 
  createdAt: String!  
}


# enum MutationType {
#     CREATED
#     UPDATED
#     DELETED
# }


# enum AccountType{
#   RETAILER
#   RESELLER
#   CITY_DISTRIBUTOR
#   PROVINCIAL_DISTRIBUTOR
# }
